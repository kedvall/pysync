name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Get Release Version
        run: echo "RELEASE_VERSION=$(uv run --with python-semantic-release semantic-release --strict version --print)" >> $GITHUB_ENV

        # NOTE: sed is not used as its usage differs on mac and linux
      - name: Update version in __main__.py
        run: python -c "import os, re; f='pysync/__main__.py'; data = open(f).read(); data = re.sub(r'__version__ = \".*\"', f'__version__ = \"{os.environ[\"RELEASE_VERSION\"]}\"', data); open(f, 'w').write(data)"

      - name: Build Executable
        run: uv run --with nuitka python -m nuitka --disable-ccache --onefile --onefile-tempdir-spec="{CACHE_DIR}/pysync/v${RELEASE_VERSION}" pysync

      - name: Package files
        run: mkdir dist && mv pysync.bin dist/pysync && tar -C dist/ -czvf "pysync-$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]').tar.gz" pysync

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: "*.tar.gz"

  release:
    runs-on: ubuntu-latest
    needs: [build]
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false
    permissions:
      id-token: write
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: "*-build"
          merge-multiple: true

      - name: Publish Release
        run: uv run --with python-semantic-release semantic-release --strict version && rm uv.lock  # Prevent uploading lockfile as asset to release

      - name: Get Release Version
        run: echo "RELEASE_VERSION=$(uv run --with python-semantic-release semantic-release --strict version --print-last-released)" >> $GITHUB_ENV

      - name: Upload Release Assets
        run: uv run --with python-semantic-release semantic-release publish

      - name: Checkout Homebrew Tap Repository
        uses: actions/checkout@v4
        with:
          repository: kedvall/homebrew-pysync
          token: ${{ secrets.HOMEBREW_GH_TOKEN }}
          path: homebrew-tap

      - name: Update Homebrew Formula
        run: |
          RELEASE_URL="https://github.com/kedvall/pysync/releases/download/v${RELEASE_VERSION}/pysync-macos.tar.gz"
          SHA256=$(shasum -a 256 dist/pysync-macos.tar.gz | awk '{print $1}')
          
          cd homebrew-tap
          sed -i "s|url \".*\"|url \"${RELEASE_URL}\"|g" pysync.rb
          sed -i "s|sha256 \".*\"|sha256 \"${SHA256}\"|g" pysync.rb
          sed -i "s/version \".*\"/version \"${RELEASE_VERSION}\"/g" pysync.rb || true

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -am "Update pysync to version ${RELEASE_VERSION}"
          git push
